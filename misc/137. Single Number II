Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,3,2]
Output: 3

Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

Solutions:

//Approach 1:
-> Use HashMap to store the value of frequency of the number
-> If for any number, frequency if equal to 1, the return the number

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int>lookup ;
        
        for(int num : nums){
            lookup[num]++ ;
        }
        
        for( pair<int,int>eachPair : lookup ){
            if(eachPair.second == 1) return eachPair.first; 
        }
        return -1 ;
    }
};
/*
[2,2,3,2]
[5,6,5,6,5,6,22]
[0,1,0,1,0,1,99]
*/
Time Compexity - O(N)[create hashmap] + O(N)[create answer vector]
Space Complexity - O(N)[for hashMap]

//Approach 2 :
-> Here keep the count of the set bits at each bit place and then use % 3 to find the occurance
-> Shift it towards right ith times and OR it with the answer
-> return the answer

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int answer = 0 ; 
        // int setBit = 1 ;
        
        for(int i = 0 ; i < 32 ; i++ ){

            int countBit = 0 ;
           
            for(int num : nums){
                if( ( num & (1<<i) ) != 0) countBit = (countBit+1)%3 ; // if the number is 3 or more than 3 => this bit has occurred thrice
                // if((num & setBit) == setBit) countBit = (countBit+1)%3 ; // if the number is 3 or more than 3 => this bit has occurred thrice
            }
            
            countBit = countBit << i ;
            answer = answer | countBit ;
            // setBit = setBit << 1  ;
        }
        return answer ;
    }
};
Time Complexity - O(32*n) 
Space Compexity - O(1)

//Approach 3:
-> ones - at any point of time, this variable holds XOR of all the elements which have appeared once only
-> twos - at any point of time, this variable holds XOR of all the elements which have appeared only twice. Here at every itration, if and-ing one and the new number will give a number will set the bits

So at any point of time below are the three cases can happen
1. A new number appear - it gets XOR-ed to thr varaible ones
2. A number gets repeated(appeares twice) - it gets removed from ones and XOR-ed to twice
3. A number appears thrice - it gets removed from both ones and twice

The final answer is the value which is present in ones - coz it will hold th single unique value

How to remove the 1's bits from ones and twices
not_three = taking "and" of ones and twices and negate it 
one &= not_three = removing the number from ones
two &= not_three = removing the number from twos


class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
        int ones = 0 ;
        int twos = 0 ;
        int not_three = 0 ;
        
        for(int num : nums){
            
            //whatever is the value of one, if it is same is num then it will be added to the two
            twos = twos | (ones & num) ;
            
            //adding it in ones
            ones = ones ^ num ;
            
            //if the number came on both ones and twos
            not_three = ~(ones & twos) ;
            
            //now removing it from ones and twos
            ones = ones & not_three ;
            twos = twos & not_three ;
            
        }
            return ones ;        
    }
};

Time Complexity - O(n) ;
Space Complexity - O(1) ;
