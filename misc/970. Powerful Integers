Given two positive integers x and y, an integer is powerful if it is equal to x^i + y^j for some integers i >= 0 and j >= 0.

Return a list of all powerful integers that have value less than or equal to bound.

You may return the answer in any order.  In your answer, each value should occur at most once.

 

Example 1:

Input: x = 2, y = 3, bound = 10
Output: [2,3,4,5,7,9,10]
Explanation: 
2 = 2^0 + 3^0
3 = 2^1 + 3^0
4 = 2^0 + 3^1
5 = 2^1 + 3^1
7 = 2^2 + 3^1
9 = 2^3 + 3^0
10 = 2^0 + 3^2

Example 2:

Input: x = 3, y = 5, bound = 15
Output: [2,4,6,8,10,14]

 

Note:

    1 <= x <= 100
    1 <= y <= 100
    0 <= bound <= 10^6

Solutions:

//Approach 1:
-> We have to keep the values x^i + y^i <= bound
-> if x^i > bound => the addition will be graeter than bound
-> if y^j > bound => the addition will be greater than bound
-> for every possible value if x^i within the bounds we have to check for every possible value of y^j, the addition should be less than the bound, if so add it in the set
-> if any of the number is 1 => for every possible value of i,j, we will get 1 only => after adding break the loop

class Solution {
public:
    vector<int> powerfulIntegers(int x, int y, int bound) {
        /*
        * (x^i + y^j <= bound) => powerful numbers
        */
        
        unordered_set<int>lookup ;
        
        int px = 0 ;
        for(int i = 0 ; (px = (int)pow(x,i) ) <= bound ; i++ ){
            int py = 0 ;
            for(int j = 0 ; (py = (int)pow(y,j))+px <= bound ; j++){
                lookup.insert(px+py) ;
                if(y == 1) break ;
            }
            if(x==1) break ;
        }
        
        vector<int>answer ;
        for(int ans : lookup){
            answer.push_back(ans) ;
        }
        
        return answer ;
    }
};
