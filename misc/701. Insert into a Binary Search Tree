Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.

For example, 

Given the tree:
        4
       / \
      2   7
     / \
    1   3
And the value to insert: 5

You can return this binary search tree:

         4
       /   \
      2     7
     / \   /
    1   3 5

This tree is also valid:

         5
       /   \
      2     7
     / \   
    1   3
         \
          4

 

Constraints:

    The number of nodes in the given tree will be between 0 and 10^4.
    Each node will have a unique integer value from 0 to -10^8, inclusive.
    -10^8 <= val <= 10^8
    It's guaranteed that val does not exist in the original BST.

Solutions:

//Approaches 1 :
-> checking for the root node only
    - if NULL -> return only newnode
    - if root->left is NULL -> add it as left of root and return root
    - if root->right is NULL -> add it as right if root and return root
-> checking for the non-null child
    - traverse right if val is greater than the root and if right child exists
    - traverse left if val is less than the root and if left child exists
-> return root
 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        
        TreeNode* newnode= new TreeNode(val) ;
        
        //base case
        if(root == NULL) return newnode ;
        
        if(val < root->val && root->left == NULL ){
            root->left = newnode ;
            return root ;
        }
        
        if(val > root->val && root->right == NULL){
            root->right = newnode ;
            return root ;
        }
        
        if(val < root->val && root->left != NULL) insertIntoBST(root->left , val) ;
        
        if(val > root->val && root->right != NULL) insertIntoBST(root->right , val) ;
        
        return root ;
    }
};

Time Complexity - O(logn)
Space Complexity - O(1)


//Approach 2:
-> In this approach we will return newnode if the child node does not exists
-> traverse left if val is less than root
-> traverse right if val is greater than root

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
             
        //base case
        if(root == NULL){
            TreeNode* newnode= new TreeNode(val) ;
            return newnode ;
        } 
        
       //recursive calls
        if(val < root->val ) root->left = insertIntoBST(root->left, val) ;
        if(val > root->val ) root->right = insertIntoBST(root->right, val) ;
        
        return root ;
    }
};
Time Complexity - O(logn)
Space Complexity - O(1)
