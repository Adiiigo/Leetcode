Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).

Example 1:

Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].

Example 2:

Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].

Constraints:

    0 <= low <= high <= 10^9

Solutions:

//Approach 1:

class Solution {
public:
    int countOdds(int low, int high) {
       
        int answer = 0 ;
        
        if(low%2 == 0){
            low++ ;
        }
        
        for(int i = low ; i <= high ; i+=2){
            answer++;
        }

        return answer ;
    }
};
Time Complexity - O(n/2)
Space Complexity - O(1) 

//Approach2 :

class Solution {
public:
    int countOdds(int low, int high) {
        
        //number of elements between the inclusive of both
        int temp = high-low+1 ;
        
        return (low%2==0)?temp/2:(temp+1)/2 ;
        
    }
};

Time Complexity - O(1) ;
Space Complexity - O(1) ;
