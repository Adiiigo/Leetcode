

Given an array of integers arr. Return the number of sub-arrays with odd sum.

As the answer may grow large, the answer must be computed modulo 10^9 + 7.

 

Example 1:

Input: arr = [1,3,5]
Output: 4
Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].
Odd sums are [1,9,3,5] so the answer is 4.

Example 2:

Input: arr = [2,4,6]
Output: 0
Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].
All sub-arrays have even sum and the answer is 0.

Example 3:

Input: arr = [1,2,3,4,5,6,7]
Output: 16

Example 4:

Input: arr = [100,100,99,99]
Output: 4

Example 5:

Input: arr = [7]
Output: 1

 

Constraints:

    1 <= arr.length <= 10^5
    1 <= arr[i] <= 100

Solutions:

//Approach 1:
-> Tried to get all the subsets and their sums
-> sum as key and unique subsets as value
-> answer is coming wrond - > verify

class Solution {
    
    vector<int>calBinary(int num){
        
        vector<int>answer ;
        
        while(num > 0){
            answer.push_back(num%2) ;
            num /= 2 ;
        } 
        reverse(answer.begin() , answer.end()) ;
        return answer ;
    }
    
    vector<int>calTrim(vector<int>nums){
        int length = nums.size() ;
        vector<int>answer ;
        
        for(int i = 1 ; i < length ; i++){
            answer.push_back(nums[i]) ;
        }
        return answer ;
    }
    
    
public:
    int numOfSubarrays(vector<int>& arr) {
        
        int length = arr.size() ;
        int startpow = pow(2,length) ;
        int endpow = pow(2,length+1) ;
        int modulo = (int)(pow(10,9) + 7);
        int count = 0 ;
        // [sum|subset]
        unordered_map<int , set<vector<int>>>lookup ;
        // unordered_set<int>lookup ;
        
        for(int i = startpow ; i < endpow ; i++){
            
            vector<int>iBinary = calBinary(i) ;
            vector<int>iFinal = calTrim(iBinary) ;
            
            vector<int>temp ;
            int sum = 0 ;
            for(int j = 0 ; j < length ; j++){
                if(iFinal[j] == 1) {
                    temp.push_back(arr[j]) ;
                    sum = (sum+arr[j]) % modulo ;
                }
            }
            
            if(sum%2 != 0){
                cout << sum << endl ;
                auto it = lookup.find(sum) ;
                if(it == lookup.end()) {
                    // sum doesnt exists
                    set<vector<int>> answer ;
                    answer.insert(temp) ;
                    lookup.insert({sum,answer}) ;
                }
                else{
                    //sum exists
                    it->second.insert(temp) ;
                }
            }
            
        }
       
        for(auto it = lookup.begin() ; it != lookup.end() ; it++){
            cout << (it->first) << "|" << (it->second.size()) << endl ;
        }
        for(int i = 0 ; i < lookup.size() ; i++){
            for(int j = 0 ; j < lookup[i].size() ; j++){
                
                count++ ;
            }
        }
        return count ;
    }
};


//Approach 2:
class Solution {
    
    /*
    even + odd = odd 
    odd + even = odd
    old + old = even 
    even + even = even 
    */
    
public:
    int numOfSubarrays(vector<int>& arr) {
        
        if(arr.size() == 0) return 0 ;
        
        int MOD=1000000007;
        
        int pre_sum = 0 ;
        int odd_count = 0 ;
        //for single number subset => if it will be odd then we have to count it => even_count = 1
        int even_count = 1 ;
        int answer = 0 ;
        
        for(int num : arr){
            pre_sum = pre_sum + num ;
            if(pre_sum % 2 == 1){
                //total sum is odd
                
                //answer will add the subsets of whatever is present + even such count
                answer = answer + even_count ;
                odd_count++ ;
            }else{
                answer = answer + odd_count ;
                even_count++ ;
            }
            answer = answer % MOD ;
        }
        return answer ;
    }
};

Time Complexity - O(n)
Space Complexity - O(1)
