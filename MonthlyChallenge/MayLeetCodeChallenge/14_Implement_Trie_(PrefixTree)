Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:

    You may assume that all inputs are consist of lowercase letters a-z.
    All inputs are guaranteed to be non-empty strings.

Wrong code :
-> not properly written
-> pointers not used properly
-> understadind not good


public:
    /** Initialize your data structure here. */
    Trie() {
        //Here I will have to initialize the trie datastructure
        root = new TrieNode() ;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        
        unordered_map<char,TrieNode*> children = root->children ;
        int counter = 0 ;
        
        //loop for accessing the word letter by letter
        for(char c : word){
            TrieNode *temp ;
            auto itr = children.find(c) ;
            if( itr != children.end()){
                //there is a character present
                temp = itr->second ;
            }
            else{
                //there is no such character present
                temp = new TrieNode(c) ;
                children[c] = temp ;
            }
            
            //update the children value
            children = temp->children ;
                
            if(word.size()-1 == counter){
                temp->isLeaf = true ;
            }
            counter++;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        TrieNode *temp = searchNode(word) ;
        bool flag = true ;
        
        if(temp->c == ' '){
            flag = false ;
        }
        
        if(flag && temp->isLeaf ){
            return true ;
        }

        return false;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        TrieNode *temp = searchNode(prefix) ;
        
        if(temp->c != ' '){
            return true ;
        }

        return false;
        
    }
    
    
    TrieNode* searchNode(string word){
        
        unordered_map<char,TrieNode*> children = root->children ;
        TrieNode *temp = NULL ;
        
        
        for(char c : word){
            
            auto itr = children.find(c) ;
            if(itr != children.end()){
                //character is present
                temp = itr->second ;
                children = temp->children ;
            }
            else{
                //character is not present
                return NULL ;
            }
        }
        return temp ;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

//wrong code ends here


Approach1:
-> the node for the trie data structure will look like
        char | hashMap | bool
  to store the current letter  | to store children | to store end of the word
-> This code generated error 
    -> The char stored as the first DS in the node creates problem for search and
        start with function and throws out of bound/not comptible data type structure in 
        compatible with 'bool'
    
public:
    /** Initialize your data structure here. */
    Trie() {
        //Here I will have to initialize the trie datastructure
        root = new TrieNode() ;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        
        unordered_map<char,TrieNode*> children = root->children ;
        int counter = 0 ;
        
        //loop for accessing the word letter by letter
        for(char c : word){
            TrieNode *temp ;
            auto itr = children.find(c) ;
            if( itr != children.end()){
                //there is a character present
                temp = itr->second ;
            }
            else{
                //there is no such character present
                temp = new TrieNode(c) ;
                children[c] = temp ;
            }
            
            //update the children value
            children = temp->children ;
                
            if(word.size()-1 == counter){
                temp->isLeaf = true ;
            }
            counter++;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        TrieNode *temp = searchNode(word) ;
        bool flag = true ;
        
        if(temp->c == ' '){
            flag = false ;
        }
        
        if(flag && temp->isLeaf ){
            return true ;
        }

        return false;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        TrieNode *temp = searchNode(prefix) ;
        
        if(temp->c != ' '){
            return true ;
        }

        return false;
        
    }
    
    
    TrieNode* searchNode(string word){
        
        unordered_map<char,TrieNode*> children = root->children ;
        TrieNode *temp = NULL ;
        
        
        for(char c : word){
            
            auto itr = children.find(c) ;
            if(itr != children.end()){
                //character is present
                temp = itr->second ;
                children = temp->children ;
            }
            else{
                //character is not present
                return NULL ;
            }
        }
        return temp ;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

//Approach 1 ends here

Approach 2:
-> Node structure
    HashMap | bool
->works seamlessly

class TrieNode{
public:
    unordered_map<char , TrieNode*> children ;
    bool isLeaf ;
    
    TrieNode():isLeaf(false),children(){}

};

class Trie {
    
    TrieNode *root ;
    
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode() ;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        
        TrieNode *temp = root ;
        
        for(char c : word){
            
            if(temp->children.count(c) == 0){ //letter doesnt exists
                //create new Node
                temp->children[c] = new TrieNode() ;
            }
            
            temp = temp->children[c] ;
            
        }
        
        temp->isLeaf = true ;
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        TrieNode *temp = searchNode(word);
        
        if(temp != NULL && temp->isLeaf == true){
            return true ;
        }
        
        return false ;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        TrieNode *temp = searchNode(prefix);
        
        if(temp != NULL ){
            return true ;
        }
        
        return false ;
        
    }
    
    TrieNode* searchNode(string word){
        
        TrieNode *temp = root ;
        
        for(char c : word){
            if(temp->children.count(c) == 0){
                return NULL ;
            }
            
            temp = temp->children[c] ;
        }
        
        
        return temp ;
    }
    
    
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
 
 //Approach 2 ends
 
 //Approach 3
 -> node structure
    Array | bool
 -> saves a lot of space

class trieNode {
    trieNode* child[26];
    bool eow = false;
    friend class Trie;

    public:
    trieNode (){
        for(auto& i : child)
            i=NULL;
    } 
};



class Trie {
    trieNode *root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new trieNode(); 
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trieNode* node = root;
        int i =0;
        while( word[i] != '\0' ){
            int idx = word[i] -'a';
            if(!node->child[idx]){
               node->child[idx] = new trieNode();
            }
            node = node->child[idx];
            i++; 
        }
        node->eow = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        trieNode * node = root;
        int i =0;
        while(word[i] != '\0'){
            int idx = word[i] - 'a';
            if(!node->child[idx])
                return false;
            node = node->child[idx];
            i++;
        }
         if(node->eow == true)
            return true;
        return false;
            
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        
        trieNode * node = root;
        int i =0;
        string ans;
        while(prefix[i] != '\0'){
            int idx = prefix[i] - 'a';
            if(!node->child[idx])
                break;
            node = node->child[idx];
            ans += prefix[i];
            i++;
        }
        if(ans == prefix)
            return true;

        return false;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
 
 //Approach 3 ends
