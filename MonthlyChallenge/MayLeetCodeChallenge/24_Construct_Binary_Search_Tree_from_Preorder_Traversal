Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Constraints:

    1 <= preorder.length <= 100
    1 <= preorder[i] <= 10^8
    The values of preorder are distinct.

Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    
    TreeNode* helper(vector<int>& preorder , int& index , int limit)
    {
        if(index == preorder.size() || preorder[index] > limit ){
            return NULL ;
        }
        int root_value = preorder[index] ;
        TreeNode* root = new TreeNode(root_value) ;
        index++ ;
        root->left = helper(preorder, index , root_value) ;
        root->right = helper(preorder, index , limit) ;
        return root ;
        
    }
    
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        int index = 0 ;
        return helper(preorder , index , INT_MAX) ;
        
        /* SOLUTION 1 STARTS FROM HERE        
        int size = preorder.size() ;
        
        if(preorder.empty()){
            return NULL ;
        }
        
        int root_value = preorder[0] ;
        vector<int> smaller , greater ;
        
        for(int i = 1 ; i < size ; i++ ){
            if(preorder[i] < root_value){
                smaller.push_back(preorder[i]) ;
            }
            else if(preorder[i] > root_value){
                greater.push_back(preorder[i]) ;
            }
        }
        
        TreeNode* root = new TreeNode(root_value) ; //new always return pointer type variable
        root->left = bstFromPreorder(smaller) ;
        root->right = bstFromPreorder(greater) ;
        return root ;
        SOLUTION 1 ENDS HERE*/
    }
};
