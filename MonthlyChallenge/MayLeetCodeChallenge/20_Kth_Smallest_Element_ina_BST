Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

 

Constraints:

    The number of elements of the BST is between 1 to 10^4.
    You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Solutions:

Approach 1:
-Utilizing the BST property + inorder traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int kth = 0 ;
        return helper(root , k , kth) ;
    }
    
    int helper(TreeNode* root, int k , int& kth){
        
        if(root->left != NULL){
           int left =  helper(root->left , k , kth) ;
            if(kth == k) return left ;
        } 

        cout << root->val ;
        kth++ ;
        if(kth == k) return root->val ;
        
        
        if(root->right != NULL){
            int right = helper(root->right, k, kth) ;
            if(kth == k) return right ;
        }
        
        return -1 ;
    }
};

//Approach 1 ends

Approach 2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> lookup ;
        int kth = 0 ;
        
        lookup.push(root) ;
    
        while(!lookup.empty()){
            while(root != NULL){
                lookup.push(root) ;
                cout << root->val << endl ;
                root = root->left ;
            }
            
            auto popped = lookup.top() ;
            lookup.pop() ;
            kth++ ;
            cout << "value of k:" << kth << endl ;
            if(kth == k) return popped->val ;
            root = popped ;
            
            if(root->right != NULL){
                root = root->right ;
            }
            else{
                root = NULL ;
            }
            
        }
        
        return -1 ;
        
        
    }
}; 

//Approach 2 ends

