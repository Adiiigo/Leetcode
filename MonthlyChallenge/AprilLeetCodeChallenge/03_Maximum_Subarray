Given an integer array nums, find the contiguous subarray (containing at least one number) which h
as the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Follow up:
If you have figured out the O(n) solution, try coding another solution using the 
divide and conquer approach, which is more subtle.

Solutions :
-> Kadane's Algorithm
-> This algorithm we keep track of the maximum sum of the numbers
-> We keep adding the current number to current sum and find the max of the max sum and current sum
-> if the current sum goes beyond 0,ie, -ve, then we reset it to 0

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        int sum = 0 ;
        int answer = INT_MIN ;
        for(int num : nums) {
            sum = sum + num ;
            answer = max(answer,sum) ; // comparing negative max to -2 => -2 is the answer but that would be resetted in the                                           next step
            sum = max(sum , 0) ; // reseting if the sum comes out to be negative because we dont not want to add negative to negative we are finding maximu value .
        }
        return answer ;
    }
};

Time Complexity: O(n)
Space Complexity: O(1) - no extra space
