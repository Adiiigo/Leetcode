Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".

Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".

Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".

Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".

Note:

    1 <= S.length <= 200
    1 <= T.length <= 200
    S and T only contain lowercase letters and '#' characters.

Follow up:

    Can you solve it in O(N) time and O(1) space?

Solutions:

->taking two pointers, one to travser to the string and one which moves backwards if there is # and this variable is 
is used to place the current character 

class Solution {
    
    void backspace(string& str , int& len){
       for(int i = 0 ; i < (int)str.length() ; i++){
            if(str[i] == '#'){
                if(len > 0){
                    len--;
                }
            }
           else{
               str[len] = str[i] ;
               len++ ;
           }
       } 
    }
    
public:
    bool backspaceCompare(string S, string T) {
        int len_s = 0 , len_t = 0 ;
        backspace(S, len_s) ;
        backspace(T, len_t) ;
        
        if(len_s != len_t){
            return false;
        }
        
        for(int i = 0 ; i < len_s ; i++){
            if(S[i] != T[i]){
                return false;
            }
        }
        return true ;
    }
};

 Time Complexity - O(n)
 Space Complexity - O(1) - inplace no extra space is used


