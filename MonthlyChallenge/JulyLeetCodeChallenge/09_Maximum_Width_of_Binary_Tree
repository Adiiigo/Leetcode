Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).

Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).

Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).

Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Note: Answer will in the range of 32-bit signed integer.

solution
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        /*
        * There is no root in the tree
        */
        if(root == NULL) return 0 ; 
        
        int result = 1 ; 
        queue<pair<TreeNode* , int>> lookup; // Corresponding Node and it's level
        lookup.push({root , 0}) ;
        
        while(!lookup.empty()){
            int count = lookup.size() ;// getting the count of the nodes in the level
            int start = lookup.front().second ;
            int end = lookup.back().second ;
            result = max(result , end-start+1) ; //for the current level 
            
            //pushing the next level child
            for(int i = 0 ; i < count ; i++){
                pair<TreeNode* , int> node = lookup.front() ;
                lookup.pop() ;
                int index = node.second - start ; // we are offsetting it for every iteration/level so that it doesnt get overflowed  
                if(node.first->left != NULL) lookup.push({node.first->left, 2*index+1}) ;
                if(node.first->right != NULL) lookup.push({node.first->right, 2*index+2}) ;
            }             
        } 
        return result ;    
    }
};

Time Complexity - O(nodes) 
Space Complexity - O(queue size)
References : https://www.youtube.com/watch?v=le-ZZSQRebw
